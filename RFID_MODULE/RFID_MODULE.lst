;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 04/21/2023 3:12:59 am
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF003EFA0  	GOTO        1856
_interrupt:
;rc522.h,313 :: 		void interrupt(void)
0x0008	0xF015C000  	MOVFF       R0, 21
;rc522.h,315 :: 		ushort RCREG_temp = 0;
0x000C	0xF016CFE1  	MOVFF       FSR1L, 22
0x0010	0xF017CFE2  	MOVFF       FSR1H, 23
0x0014	0x0100      	MOVLB       0
0x0016	0x6B71      	CLRF        interrupt_RCREG_temp_L0, 1
;rc522.h,317 :: 		if (PIR1.RCIF) // USART Receive Interrupt Flag bit
0x0018	0xAA9E      	BTFSS       PIR1, 5 
0x001A	0xD022      	BRA         L_interrupt4
;rc522.h,319 :: 		PIR1.RCIF = 0;
0x001C	0x9A9E      	BCF         PIR1, 5 
;rc522.h,320 :: 		bytevar3=0; // CLEAR THE TIMEOUT TO RESET BLUETOOTH MODULE
0x001E	0x6A35      	CLRF        _bytevar3 
;rc522.h,321 :: 		bytevar4=0; // CLEAR THE TIMEOUT TO RESET BLUETOOTH MODULE
0x0020	0x6A40      	CLRF        _bytevar4 
;rc522.h,322 :: 		RCREG_temp = RCREG;
0x0022	0xF071CFAE  	MOVFF       RCREG, interrupt_RCREG_temp_L0
;rc522.h,324 :: 		if (RCREG_temp == 35)  // 35 = "#" - (# ???)
0x0026	0x5171      	MOVF        interrupt_RCREG_temp_L0, 0, 1
0x0028	0x0A23      	XORLW       35
0x002A	0xE102      	BNZ         L_interrupt5
;rc522.h,326 :: 		receiv_cnt = 0;
0x002C	0x6A1D      	CLRF        _receiv_cnt 
;rc522.h,327 :: 		}
0x002E	0xD001      	BRA         L_interrupt6
L_interrupt5:
;rc522.h,330 :: 		receiv_cnt++;
0x0030	0x2A1D      	INCF        _receiv_cnt, 1 
;rc522.h,331 :: 		}
L_interrupt6:
;rc522.h,332 :: 		receive[receiv_cnt] = RCREG_temp;
0x0032	0x0E38      	MOVLW       _receive
0x0034	0x6EE1      	MOVWF       FSR1L 
0x0036	0x0E00      	MOVLW       hi_addr(_receive)
0x0038	0x6EE2      	MOVWF       FSR1L+1 
0x003A	0x501D      	MOVF        _receiv_cnt, 0 
0x003C	0x26E1      	ADDWF       FSR1L, 1 
0x003E	0xB0D8      	BTFSC       STATUS, 0 
0x0040	0x2AE2      	INCF        FSR1L+1, 1 
0x0042	0xFFE6C071  	MOVFF       interrupt_RCREG_temp_L0, POSTINC1
;rc522.h,334 :: 		if (receive[2] == 70) // 70 = "F"  - (#OFF1# ???)
0x0046	0x503A      	MOVF        _receive+2, 0 
0x0048	0x0A46      	XORLW       70
0x004A	0xE103      	BNZ         L_interrupt7
;rc522.h,336 :: 		receive[2] = 0;
0x004C	0x6A3A      	CLRF        _receive+2 
;rc522.h,337 :: 		Output1 = 0;
0x004E	0x6A36      	CLRF        _Output1 
;rc522.h,338 :: 		stringComplete = 1;
0x0050	0x8037      	BSF         _stringComplete, BitPos(_stringComplete+0) 
;rc522.h,339 :: 		}
L_interrupt7:
;rc522.h,340 :: 		if (receive[2] == 78)  // 78 = "N" - (#ON1# ???)
0x0052	0x503A      	MOVF        _receive+2, 0 
0x0054	0x0A4E      	XORLW       78
0x0056	0xE104      	BNZ         L_interrupt8
;rc522.h,342 :: 		receive[2] = 0;
0x0058	0x6A3A      	CLRF        _receive+2 
;rc522.h,343 :: 		Output1 = 1;
0x005A	0x0E01      	MOVLW       1
0x005C	0x6E36      	MOVWF       _Output1 
;rc522.h,344 :: 		stringComplete = 1;
0x005E	0x8037      	BSF         _stringComplete, BitPos(_stringComplete+0) 
;rc522.h,345 :: 		}
L_interrupt8:
;rc522.h,346 :: 		}
L_interrupt4:
;rc522.h,347 :: 		}
L_end_interrupt:
L__interrupt105:
0x0060	0xF000C015  	MOVFF       21, R0
0x0064	0xFFE1C016  	MOVFF       22, FSR1L
0x0068	0xFFE2C017  	MOVFF       23, FSR1H
0x006C	0x0011      	RETFIE      1
; end of _interrupt
_Delay_10us:
;__Lib_Delays.c,11 :: 		void Delay_10us() {
;__Lib_Delays.c,12 :: 		Delay_us(10);
0x006E	0x0E03      	MOVLW       3
0x0070	0x6E0D      	MOVWF       R13, 0
L_Delay_10us0:
0x0072	0x2E0D      	DECFSZ      R13, 1, 0
0x0074	0xD7FE      	BRA         L_Delay_10us0
;__Lib_Delays.c,13 :: 		}
L_end_Delay_10us:
0x0076	0x0012      	RETURN      0
; end of _Delay_10us
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x0078	0x0E07      	MOVLW       7
0x007A	0x6E0D      	MOVWF       R13, 0
L_Delay_22us1:
0x007C	0x2E0D      	DECFSZ      R13, 1, 0
0x007E	0xD7FE      	BRA         L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0080	0x0012      	RETURN      0
; end of _Delay_22us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0082	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0084	0x0012      	RETURN      0
; end of _Delay_1us
_Soft_SPI_Read:
;__Lib_SoftSPI.c,39 :: 		
;__Lib_SoftSPI.c,40 :: 		
0x0086	0x0E80      	MOVLW       128
0x0088	0x0100      	MOVLB       0
0x008A	0x6F70      	MOVWF       Soft_SPI_Read_i_L0, 1
;__Lib_SoftSPI.c,42 :: 		
0x008C	0x1F6F      	COMF        FARG_Soft_SPI_Read_sdata, 1, 1
;__Lib_SoftSPI.c,43 :: 		
L_Soft_SPI_Read2:
0x008E	0x5370      	MOVF        Soft_SPI_Read_i_L0, 1, 1
0x0090	0xE01F      	BZ          L_Soft_SPI_Read3
;__Lib_SoftSPI.c,44 :: 		
0x0092	0x5170      	MOVF        Soft_SPI_Read_i_L0, 0, 1
0x0094	0x156F      	ANDWF       FARG_Soft_SPI_Read_sdata, 0, 1
0x0096	0x6E01      	MOVWF       R1 
0x0098	0x5201      	MOVF        R1, 1 
0x009A	0x0E01      	MOVLW       1
0x009C	0xA4D8      	BTFSS       STATUS, 2 
0x009E	0x0E00      	MOVLW       0
0x00A0	0x6E00      	MOVWF       R0 
0x00A2	0xB000      	BTFSC       R0, 0 
0x00A4	0xD002      	BRA         L__Soft_SPI_Read10
0x00A6	0x9480      	BCF         SoftSpi_SDO, BitPos(SoftSpi_SDO+0) 
0x00A8	0xD001      	BRA         L__Soft_SPI_Read11
L__Soft_SPI_Read10:
0x00AA	0x8480      	BSF         SoftSpi_SDO, BitPos(SoftSpi_SDO+0) 
L__Soft_SPI_Read11:
;__Lib_SoftSPI.c,45 :: 		
0x00AC	0xDFEA      	RCALL       _Delay_1us
;__Lib_SoftSPI.c,46 :: 		
0x00AE	0xDFE9      	RCALL       _Delay_1us
;__Lib_SoftSPI.c,47 :: 		
0x00B0	0x8280      	BSF         SoftSpi_CLK, BitPos(SoftSpi_CLK+0) 
;__Lib_SoftSPI.c,48 :: 		
0x00B2	0xDFDD      	RCALL       _Delay_10us
;__Lib_SoftSPI.c,50 :: 		
0x00B4	0x5170      	MOVF        Soft_SPI_Read_i_L0, 0, 1
0x00B6	0x136F      	IORWF       FARG_Soft_SPI_Read_sdata, 1, 1
;__Lib_SoftSPI.c,51 :: 		
0x00B8	0xB680      	BTFSC       SoftSpi_SDI, BitPos(SoftSpi_SDI+0) 
0x00BA	0xD004      	BRA         L_Soft_SPI_Read4
;__Lib_SoftSPI.c,52 :: 		
0x00BC	0x1D70      	COMF        Soft_SPI_Read_i_L0, 0, 1
0x00BE	0x6E00      	MOVWF       R0 
0x00C0	0x5000      	MOVF        R0, 0 
0x00C2	0x176F      	ANDWF       FARG_Soft_SPI_Read_sdata, 1, 1
L_Soft_SPI_Read4:
;__Lib_SoftSPI.c,54 :: 		
0x00C4	0xDFD4      	RCALL       _Delay_10us
;__Lib_SoftSPI.c,55 :: 		
0x00C6	0x9280      	BCF         SoftSpi_CLK, BitPos(SoftSpi_CLK+0) 
;__Lib_SoftSPI.c,56 :: 		
0x00C8	0xDFD7      	RCALL       _Delay_22us
;__Lib_SoftSPI.c,57 :: 		
0x00CA	0x3370      	RRCF        Soft_SPI_Read_i_L0, 1, 1
0x00CC	0x9F70      	BCF         Soft_SPI_Read_i_L0, 7, 1
;__Lib_SoftSPI.c,58 :: 		
0x00CE	0xD7DF      	BRA         L_Soft_SPI_Read2
L_Soft_SPI_Read3:
;__Lib_SoftSPI.c,59 :: 		
0x00D0	0xF000C06F  	MOVFF       FARG_Soft_SPI_Read_sdata, R0
;__Lib_SoftSPI.c,60 :: 		
L_end_Soft_SPI_Read:
0x00D4	0x0012      	RETURN      0
; end of _Soft_SPI_Read
_Soft_SPI_Write:
;__Lib_SoftSPI.c,22 :: 		
;__Lib_SoftSPI.c,23 :: 		
0x00D6	0x0E80      	MOVLW       128
0x00D8	0x0100      	MOVLB       0
0x00DA	0x6F70      	MOVWF       Soft_SPI_Write_i_L0, 1
;__Lib_SoftSPI.c,25 :: 		
0x00DC	0x1F6F      	COMF        FARG_Soft_SPI_Write_sdata, 1, 1
;__Lib_SoftSPI.c,26 :: 		
L_Soft_SPI_Write0:
0x00DE	0x5370      	MOVF        Soft_SPI_Write_i_L0, 1, 1
0x00E0	0xE016      	BZ          L_Soft_SPI_Write1
;__Lib_SoftSPI.c,27 :: 		
0x00E2	0x5170      	MOVF        Soft_SPI_Write_i_L0, 0, 1
0x00E4	0x156F      	ANDWF       FARG_Soft_SPI_Write_sdata, 0, 1
0x00E6	0x6E01      	MOVWF       R1 
0x00E8	0x5201      	MOVF        R1, 1 
0x00EA	0x0E01      	MOVLW       1
0x00EC	0xA4D8      	BTFSS       STATUS, 2 
0x00EE	0x0E00      	MOVLW       0
0x00F0	0x6E00      	MOVWF       R0 
0x00F2	0xB000      	BTFSC       R0, 0 
0x00F4	0xD002      	BRA         L__Soft_SPI_Write7
0x00F6	0x9480      	BCF         SoftSpi_SDO, BitPos(SoftSpi_SDO+0) 
0x00F8	0xD001      	BRA         L__Soft_SPI_Write8
L__Soft_SPI_Write7:
0x00FA	0x8480      	BSF         SoftSpi_SDO, BitPos(SoftSpi_SDO+0) 
L__Soft_SPI_Write8:
;__Lib_SoftSPI.c,28 :: 		
0x00FC	0xDFC2      	RCALL       _Delay_1us
;__Lib_SoftSPI.c,29 :: 		
0x00FE	0xDFC1      	RCALL       _Delay_1us
;__Lib_SoftSPI.c,30 :: 		
0x0100	0x8280      	BSF         SoftSpi_CLK, BitPos(SoftSpi_CLK+0) 
;__Lib_SoftSPI.c,31 :: 		
0x0102	0xDFBA      	RCALL       _Delay_22us
;__Lib_SoftSPI.c,32 :: 		
0x0104	0x9280      	BCF         SoftSpi_CLK, BitPos(SoftSpi_CLK+0) 
;__Lib_SoftSPI.c,33 :: 		
0x0106	0xDFB8      	RCALL       _Delay_22us
;__Lib_SoftSPI.c,34 :: 		
0x0108	0x3370      	RRCF        Soft_SPI_Write_i_L0, 1, 1
0x010A	0x9F70      	BCF         Soft_SPI_Write_i_L0, 7, 1
;__Lib_SoftSPI.c,35 :: 		
0x010C	0xD7E8      	BRA         L_Soft_SPI_Write0
L_Soft_SPI_Write1:
;__Lib_SoftSPI.c,37 :: 		
L_end_Soft_SPI_Write:
0x010E	0x0012      	RETURN      0
; end of _Soft_SPI_Write
_Read_MFRC522:
;rc522.h,411 :: 		uchar Read_MFRC522(uchar addr)
;rc522.h,415 :: 		chipSelectPin = 0;
0x0110	0x9080      	BCF         RA0_bit, BitPos(RA0_bit+0) 
;rc522.h,418 :: 		Soft_SPI_Write(((addr<<1)&0x7E) | 0x80);
0x0112	0xF06FC06D  	MOVFF       FARG_Read_MFRC522_addr, FARG_Soft_SPI_Write_sdata
0x0116	0x0100      	MOVLB       0
0x0118	0x376F      	RLCF        FARG_Soft_SPI_Write_sdata, 1, 1
0x011A	0x916F      	BCF         FARG_Soft_SPI_Write_sdata, 0, 1
0x011C	0x0E7E      	MOVLW       126
0x011E	0x176F      	ANDWF       FARG_Soft_SPI_Write_sdata, 1, 1
0x0120	0x8F6F      	BSF         FARG_Soft_SPI_Write_sdata, 7, 1
0x0122	0xDFD9      	RCALL       _Soft_SPI_Write
;rc522.h,419 :: 		val = Soft_SPI_Read(0x00);
0x0124	0x6B6F      	CLRF        FARG_Soft_SPI_Read_sdata, 1
0x0126	0xDFAF      	RCALL       _Soft_SPI_Read
;rc522.h,421 :: 		chipSelectPin = 1;
0x0128	0x8080      	BSF         RA0_bit, BitPos(RA0_bit+0) 
;rc522.h,423 :: 		return val;
;rc522.h,424 :: 		}
L_end_Read_MFRC522:
0x012A	0x0012      	RETURN      0
; end of _Read_MFRC522
_Write_MFRC522:
;rc522.h,393 :: 		void Write_MFRC522(uchar addr, uchar val)
;rc522.h,395 :: 		chipSelectPin = 0;
0x012C	0x9080      	BCF         RA0_bit, BitPos(RA0_bit+0) 
;rc522.h,398 :: 		Soft_SPI_Write((addr<<1)&0x7E);
0x012E	0xF06FC06D  	MOVFF       FARG_Write_MFRC522_addr, FARG_Soft_SPI_Write_sdata
0x0132	0x0100      	MOVLB       0
0x0134	0x376F      	RLCF        FARG_Soft_SPI_Write_sdata, 1, 1
0x0136	0x916F      	BCF         FARG_Soft_SPI_Write_sdata, 0, 1
0x0138	0x0E7E      	MOVLW       126
0x013A	0x176F      	ANDWF       FARG_Soft_SPI_Write_sdata, 1, 1
0x013C	0xDFCC      	RCALL       _Soft_SPI_Write
;rc522.h,399 :: 		Soft_SPI_Write(val);
0x013E	0xF06FC06E  	MOVFF       FARG_Write_MFRC522_val, FARG_Soft_SPI_Write_sdata
0x0142	0xDFC9      	RCALL       _Soft_SPI_Write
;rc522.h,401 :: 		chipSelectPin = 1;
0x0144	0x8080      	BSF         RA0_bit, BitPos(RA0_bit+0) 
;rc522.h,402 :: 		}
L_end_Write_MFRC522:
0x0146	0x0012      	RETURN      0
; end of _Write_MFRC522
_ClearBitMask:
;rc522.h,446 :: 		void ClearBitMask(uchar reg, uchar mask)
;rc522.h,449 :: 		tmp = Read_MFRC522(reg);
0x0148	0xF06DC06B  	MOVFF       FARG_ClearBitMask_reg, FARG_Read_MFRC522_addr
0x014C	0xDFE1      	RCALL       _Read_MFRC522
;rc522.h,450 :: 		Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
0x014E	0xF06DC06B  	MOVFF       FARG_ClearBitMask_reg, FARG_Write_MFRC522_addr
0x0152	0x1D6C      	COMF        FARG_ClearBitMask_mask, 0, 1
0x0154	0x6E01      	MOVWF       R1 
0x0156	0x5001      	MOVF        R1, 0 
0x0158	0x1400      	ANDWF       R0, 0 
0x015A	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x015C	0xDFE7      	RCALL       _Write_MFRC522
;rc522.h,451 :: 		}
L_end_ClearBitMask:
0x015E	0x0012      	RETURN      0
; end of _ClearBitMask
_SetBitMask:
;rc522.h,432 :: 		void SetBitMask(uchar reg, uchar mask)
;rc522.h,435 :: 		tmp = Read_MFRC522(reg);
0x0160	0xF06DC06B  	MOVFF       FARG_SetBitMask_reg, FARG_Read_MFRC522_addr
0x0164	0xDFD5      	RCALL       _Read_MFRC522
;rc522.h,436 :: 		Write_MFRC522(reg, tmp | mask);  // set bit mask
0x0166	0xF06DC06B  	MOVFF       FARG_SetBitMask_reg, FARG_Write_MFRC522_addr
0x016A	0x516C      	MOVF        FARG_SetBitMask_mask, 0, 1
0x016C	0x1000      	IORWF       R0, 0 
0x016E	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x0170	0xDFDD      	RCALL       _Write_MFRC522
;rc522.h,437 :: 		}
L_end_SetBitMask:
0x0172	0x0012      	RETURN      0
; end of _SetBitMask
_Separate_hexP10:
;rc522.h,354 :: 		uchar Separate_hexP10(uchar val)
;rc522.h,356 :: 		val = val & 0xF0;
0x0174	0x0EF0      	MOVLW       240
0x0176	0x1459      	ANDWF       FARG_Separate_hexP10_val, 0 
0x0178	0x6E02      	MOVWF       R2 
0x017A	0xF059C002  	MOVFF       R2, FARG_Separate_hexP10_val
;rc522.h,357 :: 		val = val >> 4;
0x017E	0xF001C002  	MOVFF       R2, R1
0x0182	0x3201      	RRCF        R1, 1 
0x0184	0x9E01      	BCF         R1, 7 
0x0186	0x3201      	RRCF        R1, 1 
0x0188	0x9E01      	BCF         R1, 7 
0x018A	0x3201      	RRCF        R1, 1 
0x018C	0x9E01      	BCF         R1, 7 
0x018E	0x3201      	RRCF        R1, 1 
0x0190	0x9E01      	BCF         R1, 7 
0x0192	0xF059C001  	MOVFF       R1, FARG_Separate_hexP10_val
;rc522.h,358 :: 		if (val < 10)
0x0196	0x0E0A      	MOVLW       10
0x0198	0x5C01      	SUBWF       R1, 0 
0x019A	0xE204      	BC          L_Separate_hexP109
;rc522.h,360 :: 		return val + 48;
0x019C	0x0E30      	MOVLW       48
0x019E	0x2459      	ADDWF       FARG_Separate_hexP10_val, 0 
0x01A0	0x6E00      	MOVWF       R0 
0x01A2	0xD003      	BRA         L_end_Separate_hexP10
;rc522.h,361 :: 		}
L_Separate_hexP109:
;rc522.h,364 :: 		return val + 55;
0x01A4	0x0E37      	MOVLW       55
0x01A6	0x2459      	ADDWF       FARG_Separate_hexP10_val, 0 
0x01A8	0x6E00      	MOVWF       R0 
;rc522.h,366 :: 		}
L_end_Separate_hexP10:
0x01AA	0x0012      	RETURN      0
; end of _Separate_hexP10
_Separate_hexP1:
;rc522.h,374 :: 		uchar Separate_hexP1(uchar val)
;rc522.h,376 :: 		val = val & 0x0F;
0x01AC	0x0E0F      	MOVLW       15
0x01AE	0x1459      	ANDWF       FARG_Separate_hexP1_val, 0 
0x01B0	0x6E01      	MOVWF       R1 
0x01B2	0xF059C001  	MOVFF       R1, FARG_Separate_hexP1_val
;rc522.h,377 :: 		if (val < 10)
0x01B6	0x0E0A      	MOVLW       10
0x01B8	0x5C01      	SUBWF       R1, 0 
0x01BA	0xE204      	BC          L_Separate_hexP111
;rc522.h,379 :: 		return val + 48;
0x01BC	0x0E30      	MOVLW       48
0x01BE	0x2459      	ADDWF       FARG_Separate_hexP1_val, 0 
0x01C0	0x6E00      	MOVWF       R0 
0x01C2	0xD003      	BRA         L_end_Separate_hexP1
;rc522.h,380 :: 		}
L_Separate_hexP111:
;rc522.h,383 :: 		return val + 55;
0x01C4	0x0E37      	MOVLW       55
0x01C6	0x2459      	ADDWF       FARG_Separate_hexP1_val, 0 
0x01C8	0x6E00      	MOVWF       R0 
;rc522.h,385 :: 		}
L_end_Separate_hexP1:
0x01CA	0x0012      	RETURN      0
; end of _Separate_hexP1
_MFRC522_ToCard:
;rc522.h,566 :: 		uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
;rc522.h,568 :: 		uchar status = MI_ERR;
0x01CC	0x0E02      	MOVLW       2
0x01CE	0x6E5D      	MOVWF       MFRC522_ToCard_status_L0 
0x01D0	0x6A5E      	CLRF        MFRC522_ToCard_irqEn_L0 
0x01D2	0x6A5F      	CLRF        MFRC522_ToCard_waitIRq_L0 
;rc522.h,575 :: 		switch (command)
0x01D4	0xD00B      	BRA         L_MFRC522_ToCard17
;rc522.h,577 :: 		case PCD_AUTHENT:                //Certification cards close
L_MFRC522_ToCard19:
;rc522.h,579 :: 		irqEn = 0x12;
0x01D6	0x0E12      	MOVLW       18
0x01D8	0x6E5E      	MOVWF       MFRC522_ToCard_irqEn_L0 
;rc522.h,580 :: 		waitIRq = 0x10;
0x01DA	0x0E10      	MOVLW       16
0x01DC	0x6E5F      	MOVWF       MFRC522_ToCard_waitIRq_L0 
;rc522.h,581 :: 		break;
0x01DE	0xD00E      	BRA         L_MFRC522_ToCard18
;rc522.h,583 :: 		case PCD_TRANSCEIVE:        //Transmit FIFO data
L_MFRC522_ToCard20:
;rc522.h,585 :: 		irqEn = 0x77;
0x01E0	0x0E77      	MOVLW       119
0x01E2	0x6E5E      	MOVWF       MFRC522_ToCard_irqEn_L0 
;rc522.h,586 :: 		waitIRq = 0x30;
0x01E4	0x0E30      	MOVLW       48
0x01E6	0x6E5F      	MOVWF       MFRC522_ToCard_waitIRq_L0 
;rc522.h,587 :: 		break;
0x01E8	0xD009      	BRA         L_MFRC522_ToCard18
;rc522.h,589 :: 		default:
L_MFRC522_ToCard21:
;rc522.h,590 :: 		break;
0x01EA	0xD008      	BRA         L_MFRC522_ToCard18
;rc522.h,591 :: 		}
L_MFRC522_ToCard17:
0x01EC	0x0100      	MOVLB       0
0x01EE	0x5161      	MOVF        FARG_MFRC522_ToCard_command, 0, 1
0x01F0	0x0A0E      	XORLW       14
0x01F2	0xE0F1      	BZ          L_MFRC522_ToCard19
0x01F4	0x5161      	MOVF        FARG_MFRC522_ToCard_command, 0, 1
0x01F6	0x0A0C      	XORLW       12
0x01F8	0xE0F3      	BZ          L_MFRC522_ToCard20
0x01FA	0xD7F7      	BRA         L_MFRC522_ToCard21
L_MFRC522_ToCard18:
0x01FC	0x0100      	MOVLB       0
;rc522.h,593 :: 		Write_MFRC522(CommIEnReg, irqEn|0x80);        //Interrupt request
0x01FE	0x0E02      	MOVLW       2
0x0200	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x0202	0x0E80      	MOVLW       128
0x0204	0x105E      	IORWF       MFRC522_ToCard_irqEn_L0, 0 
0x0206	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x0208	0xDF91      	RCALL       _Write_MFRC522
;rc522.h,594 :: 		ClearBitMask(CommIrqReg, 0x80);                        //Clear all interrupt request bit
0x020A	0x0E04      	MOVLW       4
0x020C	0x6F6B      	MOVWF       FARG_ClearBitMask_reg, 1
0x020E	0x0E80      	MOVLW       128
0x0210	0x6F6C      	MOVWF       FARG_ClearBitMask_mask, 1
0x0212	0xDF9A      	RCALL       _ClearBitMask
;rc522.h,595 :: 		SetBitMask(FIFOLevelReg, 0x80);                        //FlushBuffer=1, FIFO Initialization
0x0214	0x0E0A      	MOVLW       10
0x0216	0x6F6B      	MOVWF       FARG_SetBitMask_reg, 1
0x0218	0x0E80      	MOVLW       128
0x021A	0x6F6C      	MOVWF       FARG_SetBitMask_mask, 1
0x021C	0xDFA1      	RCALL       _SetBitMask
;rc522.h,597 :: 		Write_MFRC522(CommandReg, PCD_IDLE);        //NO action; Cancel the current command???
0x021E	0x0E01      	MOVLW       1
0x0220	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x0222	0x6B6E      	CLRF        FARG_Write_MFRC522_val, 1
0x0224	0xDF83      	RCALL       _Write_MFRC522
;rc522.h,600 :: 		for (i=0; i<sendLen; i++)
0x0226	0x6A5B      	CLRF        MFRC522_ToCard_i_L0 
0x0228	0x6A5C      	CLRF        MFRC522_ToCard_i_L0+1 
L_MFRC522_ToCard22:
0x022A	0x0E00      	MOVLW       0
0x022C	0x5C5C      	SUBWF       MFRC522_ToCard_i_L0+1, 0 
0x022E	0xE102      	BNZ         L__MFRC522_ToCard119
0x0230	0x5164      	MOVF        FARG_MFRC522_ToCard_sendLen, 0, 1
0x0232	0x5C5B      	SUBWF       MFRC522_ToCard_i_L0, 0 
L__MFRC522_ToCard119:
0x0234	0xE20E      	BC          L_MFRC522_ToCard23
;rc522.h,602 :: 		Write_MFRC522(FIFODataReg, sendData[i]);
0x0236	0x0E09      	MOVLW       9
0x0238	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x023A	0x505B      	MOVF        MFRC522_ToCard_i_L0, 0 
0x023C	0x2562      	ADDWF       FARG_MFRC522_ToCard_sendData, 0, 1
0x023E	0x6EE9      	MOVWF       FSR0L 
0x0240	0x505C      	MOVF        MFRC522_ToCard_i_L0+1, 0 
0x0242	0x2163      	ADDWFC      FARG_MFRC522_ToCard_sendData+1, 0, 1
0x0244	0x6EEA      	MOVWF       FSR0L+1 
0x0246	0xF06ECFEE  	MOVFF       POSTINC0, FARG_Write_MFRC522_val
0x024A	0xDF70      	RCALL       _Write_MFRC522
;rc522.h,600 :: 		for (i=0; i<sendLen; i++)
0x024C	0x4A5B      	INFSNZ      MFRC522_ToCard_i_L0, 1 
0x024E	0x2A5C      	INCF        MFRC522_ToCard_i_L0+1, 1 
;rc522.h,603 :: 		}
0x0250	0xD7EC      	BRA         L_MFRC522_ToCard22
L_MFRC522_ToCard23:
;rc522.h,606 :: 		Write_MFRC522(CommandReg, command);
0x0252	0x0E01      	MOVLW       1
0x0254	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x0256	0xF06EC061  	MOVFF       FARG_MFRC522_ToCard_command, FARG_Write_MFRC522_val
0x025A	0xDF68      	RCALL       _Write_MFRC522
;rc522.h,607 :: 		if (command == PCD_TRANSCEIVE)
0x025C	0x5161      	MOVF        FARG_MFRC522_ToCard_command, 0, 1
0x025E	0x0A0C      	XORLW       12
0x0260	0xE105      	BNZ         L_MFRC522_ToCard25
;rc522.h,609 :: 		SetBitMask(BitFramingReg, 0x80);                //StartSend=1,transmission of data starts
0x0262	0x0E0D      	MOVLW       13
0x0264	0x6F6B      	MOVWF       FARG_SetBitMask_reg, 1
0x0266	0x0E80      	MOVLW       128
0x0268	0x6F6C      	MOVWF       FARG_SetBitMask_mask, 1
0x026A	0xDF7A      	RCALL       _SetBitMask
;rc522.h,610 :: 		}
L_MFRC522_ToCard25:
;rc522.h,613 :: 		i = 2000;        //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
0x026C	0x0ED0      	MOVLW       208
0x026E	0x6E5B      	MOVWF       MFRC522_ToCard_i_L0 
0x0270	0x0E07      	MOVLW       7
0x0272	0x6E5C      	MOVWF       MFRC522_ToCard_i_L0+1 
;rc522.h,614 :: 		do
L_MFRC522_ToCard26:
;rc522.h,618 :: 		n = Read_MFRC522(CommIrqReg);
0x0274	0x0E04      	MOVLW       4
0x0276	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x0278	0xDF4B      	RCALL       _Read_MFRC522
0x027A	0xF05AC000  	MOVFF       R0, MFRC522_ToCard_n_L0
;rc522.h,619 :: 		i--;
0x027E	0x0E01      	MOVLW       1
0x0280	0x5E5B      	SUBWF       MFRC522_ToCard_i_L0, 1 
0x0282	0x0E00      	MOVLW       0
0x0284	0x5A5C      	SUBWFB      MFRC522_ToCard_i_L0+1, 1 
;rc522.h,621 :: 		while ((i!=0) && !(n&0x01) && !(n&waitIRq));
0x0286	0x0E00      	MOVLW       0
0x0288	0x185C      	XORWF       MFRC522_ToCard_i_L0+1, 0 
0x028A	0xE102      	BNZ         L__MFRC522_ToCard120
0x028C	0x0E00      	MOVLW       0
0x028E	0x185B      	XORWF       MFRC522_ToCard_i_L0, 0 
L__MFRC522_ToCard120:
0x0290	0xE007      	BZ          L__MFRC522_ToCard94
0x0292	0xB05A      	BTFSC       MFRC522_ToCard_n_L0, 0 
0x0294	0xD005      	BRA         L__MFRC522_ToCard94
0x0296	0x505F      	MOVF        MFRC522_ToCard_waitIRq_L0, 0 
0x0298	0x145A      	ANDWF       MFRC522_ToCard_n_L0, 0 
0x029A	0x6E00      	MOVWF       R0 
0x029C	0xE101      	BNZ         L__MFRC522_ToCard94
0x029E	0xD7EA      	BRA         L_MFRC522_ToCard26
L__MFRC522_ToCard94:
;rc522.h,623 :: 		ClearBitMask(BitFramingReg, 0x80);                        //StartSend=0
0x02A0	0x0E0D      	MOVLW       13
0x02A2	0x6F6B      	MOVWF       FARG_ClearBitMask_reg, 1
0x02A4	0x0E80      	MOVLW       128
0x02A6	0x6F6C      	MOVWF       FARG_ClearBitMask_mask, 1
0x02A8	0xDF4F      	RCALL       _ClearBitMask
;rc522.h,625 :: 		if (i != 0)
0x02AA	0x0E00      	MOVLW       0
0x02AC	0x185C      	XORWF       MFRC522_ToCard_i_L0+1, 0 
0x02AE	0xE102      	BNZ         L__MFRC522_ToCard121
0x02B0	0x0E00      	MOVLW       0
0x02B2	0x185B      	XORWF       MFRC522_ToCard_i_L0, 0 
L__MFRC522_ToCard121:
0x02B4	0xB4D8      	BTFSC       STATUS, 2 
0x02B6	0xD07C      	BRA         L_MFRC522_ToCard31
;rc522.h,627 :: 		if(!(Read_MFRC522(ErrorReg) & 0x1B))        //BufferOvfl Collerr CRCErr ProtecolErr
0x02B8	0x0E06      	MOVLW       6
0x02BA	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x02BC	0xDF29      	RCALL       _Read_MFRC522
0x02BE	0x0E1B      	MOVLW       27
0x02C0	0x1600      	ANDWF       R0, 1 
0x02C2	0x5200      	MOVF        R0, 1 
0x02C4	0xA4D8      	BTFSS       STATUS, 2 
0x02C6	0xD072      	BRA         L_MFRC522_ToCard32
;rc522.h,629 :: 		status = MI_OK;
0x02C8	0x6A5D      	CLRF        MFRC522_ToCard_status_L0 
;rc522.h,630 :: 		if (n & irqEn & 0x01)
0x02CA	0x505E      	MOVF        MFRC522_ToCard_irqEn_L0, 0 
0x02CC	0x145A      	ANDWF       MFRC522_ToCard_n_L0, 0 
0x02CE	0x6E01      	MOVWF       R1 
0x02D0	0xA001      	BTFSS       R1, 0 
0x02D2	0xD002      	BRA         L_MFRC522_ToCard33
;rc522.h,632 :: 		status = MI_NOTAGERR;                        //??
0x02D4	0x0E01      	MOVLW       1
0x02D6	0x6E5D      	MOVWF       MFRC522_ToCard_status_L0 
;rc522.h,633 :: 		}
L_MFRC522_ToCard33:
;rc522.h,635 :: 		if (command == PCD_TRANSCEIVE)
0x02D8	0x5161      	MOVF        FARG_MFRC522_ToCard_command, 0, 1
0x02DA	0x0A0C      	XORLW       12
0x02DC	0xE166      	BNZ         L_MFRC522_ToCard34
;rc522.h,637 :: 		n = Read_MFRC522(FIFOLevelReg);
0x02DE	0x0E0A      	MOVLW       10
0x02E0	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x02E2	0xDF16      	RCALL       _Read_MFRC522
0x02E4	0xF05AC000  	MOVFF       R0, MFRC522_ToCard_n_L0
;rc522.h,638 :: 		lastBits = Read_MFRC522(ControlReg) & 0x07;
0x02E8	0x0E0C      	MOVLW       12
0x02EA	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x02EC	0xDF11      	RCALL       _Read_MFRC522
0x02EE	0x0E07      	MOVLW       7
0x02F0	0x1600      	ANDWF       R0, 1 
0x02F2	0xF059C000  	MOVFF       R0, MFRC522_ToCard_lastBits_L0
;rc522.h,639 :: 		if (lastBits)
0x02F6	0x5200      	MOVF        R0, 1 
0x02F8	0xE01F      	BZ          L_MFRC522_ToCard35
;rc522.h,641 :: 		*backLen = (n-1)*8 + lastBits;
0x02FA	0x045A      	DECF        MFRC522_ToCard_n_L0, 0 
0x02FC	0x6E03      	MOVWF       R3 
0x02FE	0x6A04      	CLRF        R4 
0x0300	0x0E00      	MOVLW       0
0x0302	0x5A04      	SUBWFB      R4, 1 
0x0304	0x0E03      	MOVLW       3
0x0306	0x6E02      	MOVWF       R2 
0x0308	0xF000C003  	MOVFF       R3, R0
0x030C	0xF001C004  	MOVFF       R4, R1
0x0310	0x5002      	MOVF        R2, 0 
L__MFRC522_ToCard122:
0x0312	0xE005      	BZ          L__MFRC522_ToCard123
0x0314	0x3600      	RLCF        R0, 1 
0x0316	0x9000      	BCF         R0, 0 
0x0318	0x3601      	RLCF        R1, 1 
0x031A	0x0FFF      	ADDLW       255
0x031C	0xD7FA      	BRA         L__MFRC522_ToCard122
L__MFRC522_ToCard123:
0x031E	0x5059      	MOVF        MFRC522_ToCard_lastBits_L0, 0 
0x0320	0x2600      	ADDWF       R0, 1 
0x0322	0x0E00      	MOVLW       0
0x0324	0x2201      	ADDWFC      R1, 1 
0x0326	0xFFE1C067  	MOVFF       FARG_MFRC522_ToCard_backLen, FSR1L
0x032A	0xFFE2C068  	MOVFF       FARG_MFRC522_ToCard_backLen+1, FSR1H
0x032E	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0332	0xFFE6C001  	MOVFF       R1, POSTINC1
;rc522.h,642 :: 		}
0x0336	0xD015      	BRA         L_MFRC522_ToCard36
L_MFRC522_ToCard35:
;rc522.h,645 :: 		*backLen = n*8;
0x0338	0x0E03      	MOVLW       3
0x033A	0x6E02      	MOVWF       R2 
0x033C	0xF000C05A  	MOVFF       MFRC522_ToCard_n_L0, R0
0x0340	0x0E00      	MOVLW       0
0x0342	0x6E01      	MOVWF       R1 
0x0344	0x5002      	MOVF        R2, 0 
L__MFRC522_ToCard124:
0x0346	0xE005      	BZ          L__MFRC522_ToCard125
0x0348	0x3600      	RLCF        R0, 1 
0x034A	0x9000      	BCF         R0, 0 
0x034C	0x3601      	RLCF        R1, 1 
0x034E	0x0FFF      	ADDLW       255
0x0350	0xD7FA      	BRA         L__MFRC522_ToCard124
L__MFRC522_ToCard125:
0x0352	0xFFE1C067  	MOVFF       FARG_MFRC522_ToCard_backLen, FSR1L
0x0356	0xFFE2C068  	MOVFF       FARG_MFRC522_ToCard_backLen+1, FSR1H
0x035A	0xFFE6C000  	MOVFF       R0, POSTINC1
0x035E	0xFFE6C001  	MOVFF       R1, POSTINC1
;rc522.h,646 :: 		}
L_MFRC522_ToCard36:
;rc522.h,648 :: 		if (n == 0)
0x0362	0x505A      	MOVF        MFRC522_ToCard_n_L0, 0 
0x0364	0x0A00      	XORLW       0
0x0366	0xE102      	BNZ         L_MFRC522_ToCard37
;rc522.h,650 :: 		n = 1;
0x0368	0x0E01      	MOVLW       1
0x036A	0x6E5A      	MOVWF       MFRC522_ToCard_n_L0 
;rc522.h,651 :: 		}
L_MFRC522_ToCard37:
;rc522.h,652 :: 		if (n > MAX_LEN)
0x036C	0x505A      	MOVF        MFRC522_ToCard_n_L0, 0 
0x036E	0x0810      	SUBLW       16
0x0370	0xE202      	BC          L_MFRC522_ToCard38
;rc522.h,654 :: 		n = MAX_LEN;
0x0372	0x0E10      	MOVLW       16
0x0374	0x6E5A      	MOVWF       MFRC522_ToCard_n_L0 
;rc522.h,655 :: 		}
L_MFRC522_ToCard38:
;rc522.h,658 :: 		for (i=0; i<n; i++)
0x0376	0x6A5B      	CLRF        MFRC522_ToCard_i_L0 
0x0378	0x6A5C      	CLRF        MFRC522_ToCard_i_L0+1 
L_MFRC522_ToCard39:
0x037A	0x0E00      	MOVLW       0
0x037C	0x5C5C      	SUBWF       MFRC522_ToCard_i_L0+1, 0 
0x037E	0xE102      	BNZ         L__MFRC522_ToCard126
0x0380	0x505A      	MOVF        MFRC522_ToCard_n_L0, 0 
0x0382	0x5C5B      	SUBWF       MFRC522_ToCard_i_L0, 0 
L__MFRC522_ToCard126:
0x0384	0xE212      	BC          L_MFRC522_ToCard40
;rc522.h,660 :: 		backData[i] = Read_MFRC522(FIFODataReg);
0x0386	0x505B      	MOVF        MFRC522_ToCard_i_L0, 0 
0x0388	0x2565      	ADDWF       FARG_MFRC522_ToCard_backData, 0, 1
0x038A	0x6F69      	MOVWF       FLOC__MFRC522_ToCard, 1
0x038C	0x505C      	MOVF        MFRC522_ToCard_i_L0+1, 0 
0x038E	0x2166      	ADDWFC      FARG_MFRC522_ToCard_backData+1, 0, 1
0x0390	0x6F6A      	MOVWF       FLOC__MFRC522_ToCard+1, 1
0x0392	0x0E09      	MOVLW       9
0x0394	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x0396	0xDEBC      	RCALL       _Read_MFRC522
0x0398	0xFFE1C069  	MOVFF       FLOC__MFRC522_ToCard, FSR1L
0x039C	0xFFE2C06A  	MOVFF       FLOC__MFRC522_ToCard+1, FSR1H
0x03A0	0xFFE6C000  	MOVFF       R0, POSTINC1
;rc522.h,658 :: 		for (i=0; i<n; i++)
0x03A4	0x4A5B      	INFSNZ      MFRC522_ToCard_i_L0, 1 
0x03A6	0x2A5C      	INCF        MFRC522_ToCard_i_L0+1, 1 
;rc522.h,661 :: 		}
0x03A8	0xD7E8      	BRA         L_MFRC522_ToCard39
L_MFRC522_ToCard40:
;rc522.h,662 :: 		}
L_MFRC522_ToCard34:
;rc522.h,663 :: 		}
0x03AA	0xD002      	BRA         L_MFRC522_ToCard42
L_MFRC522_ToCard32:
;rc522.h,666 :: 		status = MI_ERR;
0x03AC	0x0E02      	MOVLW       2
0x03AE	0x6E5D      	MOVWF       MFRC522_ToCard_status_L0 
;rc522.h,667 :: 		}
L_MFRC522_ToCard42:
;rc522.h,669 :: 		}
L_MFRC522_ToCard31:
;rc522.h,674 :: 		return status;
0x03B0	0xF000C05D  	MOVFF       MFRC522_ToCard_status_L0, R0
;rc522.h,675 :: 		}
L_end_MFRC522_ToCard:
0x03B4	0x0012      	RETURN      0
; end of _MFRC522_ToCard
_CalulateCRC:
;rc522.h,723 :: 		void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData)
;rc522.h,727 :: 		ClearBitMask(DivIrqReg, 0x04);                        //CRCIrq = 0
0x03B6	0x0E05      	MOVLW       5
0x03B8	0x0100      	MOVLB       0
0x03BA	0x6F6B      	MOVWF       FARG_ClearBitMask_reg, 1
0x03BC	0x0E04      	MOVLW       4
0x03BE	0x6F6C      	MOVWF       FARG_ClearBitMask_mask, 1
0x03C0	0xDEC3      	RCALL       _ClearBitMask
;rc522.h,728 :: 		SetBitMask(FIFOLevelReg, 0x80);                        //Clear the FIFO pointer
0x03C2	0x0E0A      	MOVLW       10
0x03C4	0x6F6B      	MOVWF       FARG_SetBitMask_reg, 1
0x03C6	0x0E80      	MOVLW       128
0x03C8	0x6F6C      	MOVWF       FARG_SetBitMask_mask, 1
0x03CA	0xDECA      	RCALL       _SetBitMask
;rc522.h,732 :: 		for (i=0; i<len; i++)
0x03CC	0x6A5E      	CLRF        CalulateCRC_i_L0 
L_CalulateCRC48:
0x03CE	0x505B      	MOVF        FARG_CalulateCRC_len, 0 
0x03D0	0x5C5E      	SUBWF       CalulateCRC_i_L0, 0 
0x03D2	0xE20D      	BC          L_CalulateCRC49
;rc522.h,734 :: 		Write_MFRC522(FIFODataReg, *(pIndata+i));
0x03D4	0x0E09      	MOVLW       9
0x03D6	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x03D8	0x505E      	MOVF        CalulateCRC_i_L0, 0 
0x03DA	0x2459      	ADDWF       FARG_CalulateCRC_pIndata, 0 
0x03DC	0x6EE9      	MOVWF       FSR0L 
0x03DE	0x0E00      	MOVLW       0
0x03E0	0x205A      	ADDWFC      FARG_CalulateCRC_pIndata+1, 0 
0x03E2	0x6EEA      	MOVWF       FSR0L+1 
0x03E4	0xF06ECFEE  	MOVFF       POSTINC0, FARG_Write_MFRC522_val
0x03E8	0xDEA1      	RCALL       _Write_MFRC522
;rc522.h,732 :: 		for (i=0; i<len; i++)
0x03EA	0x2A5E      	INCF        CalulateCRC_i_L0, 1 
;rc522.h,735 :: 		}
0x03EC	0xD7F0      	BRA         L_CalulateCRC48
L_CalulateCRC49:
;rc522.h,736 :: 		Write_MFRC522(CommandReg, PCD_CALCCRC);
0x03EE	0x0E01      	MOVLW       1
0x03F0	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x03F2	0x0E03      	MOVLW       3
0x03F4	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x03F6	0xDE9A      	RCALL       _Write_MFRC522
;rc522.h,739 :: 		i = 0xFF;
0x03F8	0x0EFF      	MOVLW       255
0x03FA	0x6E5E      	MOVWF       CalulateCRC_i_L0 
;rc522.h,740 :: 		do
L_CalulateCRC51:
;rc522.h,742 :: 		n = Read_MFRC522(DivIrqReg);
0x03FC	0x0E05      	MOVLW       5
0x03FE	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x0400	0xDE87      	RCALL       _Read_MFRC522
0x0402	0xF05FC000  	MOVFF       R0, CalulateCRC_n_L0
;rc522.h,743 :: 		i--;
0x0406	0x065E      	DECF        CalulateCRC_i_L0, 1 
;rc522.h,745 :: 		while ((i!=0) && !(n&0x04));                        //CRCIrq = 1
0x0408	0x505E      	MOVF        CalulateCRC_i_L0, 0 
0x040A	0x0A00      	XORLW       0
0x040C	0xE003      	BZ          L__CalulateCRC95
0x040E	0xB45F      	BTFSC       CalulateCRC_n_L0, 2 
0x0410	0xD001      	BRA         L__CalulateCRC95
0x0412	0xD7F4      	BRA         L_CalulateCRC51
L__CalulateCRC95:
;rc522.h,748 :: 		pOutData[0] = Read_MFRC522(CRCResultRegL);
0x0414	0xF060C05C  	MOVFF       FARG_CalulateCRC_pOutData, FLOC__CalulateCRC
0x0418	0xF061C05D  	MOVFF       FARG_CalulateCRC_pOutData+1, FLOC__CalulateCRC+1
0x041C	0x0E22      	MOVLW       34
0x041E	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x0420	0xDE77      	RCALL       _Read_MFRC522
0x0422	0xFFE1C060  	MOVFF       FLOC__CalulateCRC, FSR1L
0x0426	0xFFE2C061  	MOVFF       FLOC__CalulateCRC+1, FSR1H
0x042A	0xFFE6C000  	MOVFF       R0, POSTINC1
;rc522.h,749 :: 		pOutData[1] = Read_MFRC522(CRCResultRegM);
0x042E	0x0E01      	MOVLW       1
0x0430	0x245C      	ADDWF       FARG_CalulateCRC_pOutData, 0 
0x0432	0x6F60      	MOVWF       FLOC__CalulateCRC, 1
0x0434	0x0E00      	MOVLW       0
0x0436	0x205D      	ADDWFC      FARG_CalulateCRC_pOutData+1, 0 
0x0438	0x6F61      	MOVWF       FLOC__CalulateCRC+1, 1
0x043A	0x0E21      	MOVLW       33
0x043C	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x043E	0xDE68      	RCALL       _Read_MFRC522
0x0440	0xFFE1C060  	MOVFF       FLOC__CalulateCRC, FSR1L
0x0444	0xFFE2C061  	MOVFF       FLOC__CalulateCRC+1, FSR1H
0x0448	0xFFE6C000  	MOVFF       R0, POSTINC1
;rc522.h,750 :: 		}
L_end_CalulateCRC:
0x044C	0x0012      	RETURN      0
; end of _CalulateCRC
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x044E	0xB2AC      	BTFSC       TXSTA, 1 
0x0450	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x0452	0x0000      	NOP
0x0454	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0456	0xFFADC059  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x045A	0x0012      	RETURN      0
; end of _UART1_Write
_AntennaOn:
;rc522.h,460 :: 		void AntennaOn(void)
;rc522.h,464 :: 		temp = Read_MFRC522(TxControlReg);
0x045C	0x0E14      	MOVLW       20
0x045E	0x0100      	MOVLB       0
0x0460	0x6F6D      	MOVWF       FARG_Read_MFRC522_addr, 1
0x0462	0xDE56      	RCALL       _Read_MFRC522
;rc522.h,465 :: 		if (!(temp & 0x03))
0x0464	0x0E03      	MOVLW       3
0x0466	0x1600      	ANDWF       R0, 1 
0x0468	0x5200      	MOVF        R0, 1 
0x046A	0xE105      	BNZ         L_AntennaOn13
;rc522.h,467 :: 		SetBitMask(TxControlReg, 0x03);
0x046C	0x0E14      	MOVLW       20
0x046E	0x6F6B      	MOVWF       FARG_SetBitMask_reg, 1
0x0470	0x0E03      	MOVLW       3
0x0472	0x6F6C      	MOVWF       FARG_SetBitMask_mask, 1
0x0474	0xDE75      	RCALL       _SetBitMask
;rc522.h,468 :: 		}
L_AntennaOn13:
;rc522.h,469 :: 		}
L_end_AntennaOn:
0x0476	0x0012      	RETURN      0
; end of _AntennaOn
_MFRC522_Reset:
;rc522.h,490 :: 		void MFRC522_Reset(void)
;rc522.h,492 :: 		Write_MFRC522(CommandReg, PCD_RESETPHASE);
0x0478	0x0E01      	MOVLW       1
0x047A	0x0100      	MOVLB       0
0x047C	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x047E	0x0E0F      	MOVLW       15
0x0480	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x0482	0xDE54      	RCALL       _Write_MFRC522
;rc522.h,493 :: 		}
L_end_MFRC522_Reset:
0x0484	0x0012      	RETURN      0
; end of _MFRC522_Reset
_delay1ms:
;rc522.h,244 :: 		void delay1ms(uint delayTime)
;rc522.h,247 :: 		for (loop1=0;loop1<delayTime;loop1++)
0x0486	0x6A01      	CLRF        R1 
0x0488	0x6A02      	CLRF        R2 
L_delay1ms0:
0x048A	0x5053      	MOVF        FARG_delay1ms_delayTime+1, 0 
0x048C	0x5C02      	SUBWF       R2, 0 
0x048E	0xE102      	BNZ         L__delay1ms102
0x0490	0x5052      	MOVF        FARG_delay1ms_delayTime, 0 
0x0492	0x5C01      	SUBWF       R1, 0 
L__delay1ms102:
0x0494	0xE20B      	BC          L_delay1ms1
;rc522.h,249 :: 		delay_ms(1);
0x0496	0x0E02      	MOVLW       2
0x0498	0x6E0C      	MOVWF       R12, 0
0x049A	0x0E4B      	MOVLW       75
0x049C	0x6E0D      	MOVWF       R13, 0
L_delay1ms3:
0x049E	0x2E0D      	DECFSZ      R13, 1, 0
0x04A0	0xD7FE      	BRA         L_delay1ms3
0x04A2	0x2E0C      	DECFSZ      R12, 1, 0
0x04A4	0xD7FC      	BRA         L_delay1ms3
;rc522.h,247 :: 		for (loop1=0;loop1<delayTime;loop1++)
0x04A6	0x4A01      	INFSNZ      R1, 1 
0x04A8	0x2A02      	INCF        R2, 1 
;rc522.h,250 :: 		}
0x04AA	0xD7EF      	BRA         L_delay1ms0
L_delay1ms1:
;rc522.h,251 :: 		}
L_end_delay1ms:
0x04AC	0x0012      	RETURN      0
; end of _delay1ms
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x04AE	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x04B0	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x04B4	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x04B6	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x04B8	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x04BA	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x04BC	0x0012      	RETURN      0
; end of ___CC2DW
_MFRC522_Init:
;rc522.h,502 :: 		void MFRC522_Init(void)
;rc522.h,504 :: 		NRSTPD = 1;
0x04BE	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;rc522.h,506 :: 		MFRC522_Reset();
0x04C0	0xDFDB      	RCALL       _MFRC522_Reset
;rc522.h,509 :: 		Write_MFRC522(TModeReg, 0x8D);                //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
0x04C2	0x0E2A      	MOVLW       42
0x04C4	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x04C6	0x0E8D      	MOVLW       141
0x04C8	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x04CA	0xDE30      	RCALL       _Write_MFRC522
;rc522.h,510 :: 		Write_MFRC522(TPrescalerReg, 0x3E);        //TModeReg[3..0] + TPrescalerReg
0x04CC	0x0E2B      	MOVLW       43
0x04CE	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x04D0	0x0E3E      	MOVLW       62
0x04D2	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x04D4	0xDE2B      	RCALL       _Write_MFRC522
;rc522.h,511 :: 		Write_MFRC522(TReloadRegL, 30);
0x04D6	0x0E2D      	MOVLW       45
0x04D8	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x04DA	0x0E1E      	MOVLW       30
0x04DC	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x04DE	0xDE26      	RCALL       _Write_MFRC522
;rc522.h,512 :: 		Write_MFRC522(TReloadRegH, 0);
0x04E0	0x0E2C      	MOVLW       44
0x04E2	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x04E4	0x6B6E      	CLRF        FARG_Write_MFRC522_val, 1
0x04E6	0xDE22      	RCALL       _Write_MFRC522
;rc522.h,514 :: 		Write_MFRC522(TxAutoReg, 0x40);                //100%ASK
0x04E8	0x0E15      	MOVLW       21
0x04EA	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x04EC	0x0E40      	MOVLW       64
0x04EE	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x04F0	0xDE1D      	RCALL       _Write_MFRC522
;rc522.h,515 :: 		Write_MFRC522(ModeReg, 0x3D);                //CRC Initial value 0x6363        ???
0x04F2	0x0E11      	MOVLW       17
0x04F4	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x04F6	0x0E3D      	MOVLW       61
0x04F8	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x04FA	0xDE18      	RCALL       _Write_MFRC522
;rc522.h,521 :: 		AntennaOn();                //Open the antenna
0x04FC	0xDFAF      	RCALL       _AntennaOn
;rc522.h,522 :: 		}
L_end_MFRC522_Init:
0x04FE	0x0012      	RETURN      0
; end of _MFRC522_Init
_Soft_SPI_Init:
;__Lib_SoftSPI.c,11 :: 		
;__Lib_SoftSPI.c,13 :: 		
0x0500	0x8692      	BSF         SoftSpi_SDI_Direction, BitPos(SoftSpi_SDI_Direction+0) 
;__Lib_SoftSPI.c,14 :: 		
0x0502	0x9492      	BCF         SoftSpi_SDO_Direction, BitPos(SoftSpi_SDO_Direction+0) 
;__Lib_SoftSPI.c,15 :: 		
0x0504	0x9292      	BCF         SoftSpi_CLK_Direction, BitPos(SoftSpi_CLK_Direction+0) 
;__Lib_SoftSPI.c,17 :: 		
0x0506	0x9680      	BCF         SoftSpi_SDI, BitPos(SoftSpi_SDI+0) 
;__Lib_SoftSPI.c,18 :: 		
0x0508	0x9480      	BCF         SoftSpi_SDO, BitPos(SoftSpi_SDO+0) 
;__Lib_SoftSPI.c,19 :: 		
0x050A	0x9280      	BCF         SoftSpi_CLK, BitPos(SoftSpi_CLK+0) 
;__Lib_SoftSPI.c,20 :: 		
L_end_Soft_SPI_Init:
0x050C	0x0012      	RETURN      0
; end of _Soft_SPI_Init
_MFRC522_Anticoll:
;rc522.h,684 :: 		uchar MFRC522_Anticoll(uchar *serNum)
;rc522.h,688 :: 		uchar serNumCheck=0;
0x050E	0x6A58      	CLRF        MFRC522_Anticoll_serNumCheck_L0 
;rc522.h,694 :: 		Write_MFRC522(BitFramingReg, 0x00);                //TxLastBists = BitFramingReg[2..0]
0x0510	0x0E0D      	MOVLW       13
0x0512	0x0100      	MOVLB       0
0x0514	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x0516	0x6B6E      	CLRF        FARG_Write_MFRC522_val, 1
0x0518	0xDE09      	RCALL       _Write_MFRC522
;rc522.h,696 :: 		serNum[0] = PICC_ANTICOLL;
0x051A	0xFFE1C052  	MOVFF       FARG_MFRC522_Anticoll_serNum, FSR1L
0x051E	0xFFE2C053  	MOVFF       FARG_MFRC522_Anticoll_serNum+1, FSR1H
0x0522	0x0E93      	MOVLW       147
0x0524	0x6EE6      	MOVWF       POSTINC1 
;rc522.h,697 :: 		serNum[1] = 0x20;
0x0526	0x0E01      	MOVLW       1
0x0528	0x2452      	ADDWF       FARG_MFRC522_Anticoll_serNum, 0 
0x052A	0x6EE1      	MOVWF       FSR1L 
0x052C	0x0E00      	MOVLW       0
0x052E	0x2053      	ADDWFC      FARG_MFRC522_Anticoll_serNum+1, 0 
0x0530	0x6EE2      	MOVWF       FSR1L+1 
0x0532	0x0E20      	MOVLW       32
0x0534	0x6EE6      	MOVWF       POSTINC1 
;rc522.h,698 :: 		status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
0x0536	0x0E0C      	MOVLW       12
0x0538	0x6F61      	MOVWF       FARG_MFRC522_ToCard_command, 1
0x053A	0xF062C052  	MOVFF       FARG_MFRC522_Anticoll_serNum, FARG_MFRC522_ToCard_sendData
0x053E	0xF063C053  	MOVFF       FARG_MFRC522_Anticoll_serNum+1, FARG_MFRC522_ToCard_sendData+1
0x0542	0x0E02      	MOVLW       2
0x0544	0x6F64      	MOVWF       FARG_MFRC522_ToCard_sendLen, 1
0x0546	0xF065C052  	MOVFF       FARG_MFRC522_Anticoll_serNum, FARG_MFRC522_ToCard_backData
0x054A	0xF066C053  	MOVFF       FARG_MFRC522_Anticoll_serNum+1, FARG_MFRC522_ToCard_backData+1
0x054E	0x0E56      	MOVLW       MFRC522_Anticoll_unLen_L0
0x0550	0x6F67      	MOVWF       FARG_MFRC522_ToCard_backLen, 1
0x0552	0x0E00      	MOVLW       hi_addr(MFRC522_Anticoll_unLen_L0)
0x0554	0x6F68      	MOVWF       FARG_MFRC522_ToCard_backLen+1, 1
0x0556	0xDE3A      	RCALL       _MFRC522_ToCard
0x0558	0xF054C000  	MOVFF       R0, MFRC522_Anticoll_status_L0
;rc522.h,700 :: 		if (status == MI_OK)
0x055C	0x5000      	MOVF        R0, 0 
0x055E	0x0A00      	XORLW       0
0x0560	0xE119      	BNZ         L_MFRC522_Anticoll43
;rc522.h,703 :: 		for (i=0; i<4; i++)
0x0562	0x6A55      	CLRF        MFRC522_Anticoll_i_L0 
L_MFRC522_Anticoll44:
0x0564	0x0E04      	MOVLW       4
0x0566	0x5C55      	SUBWF       MFRC522_Anticoll_i_L0, 0 
0x0568	0xE20A      	BC          L_MFRC522_Anticoll45
;rc522.h,705 :: 		serNumCheck ^= serNum[i];
0x056A	0x5055      	MOVF        MFRC522_Anticoll_i_L0, 0 
0x056C	0x2452      	ADDWF       FARG_MFRC522_Anticoll_serNum, 0 
0x056E	0x6ED9      	MOVWF       FSR2L 
0x0570	0x0E00      	MOVLW       0
0x0572	0x2053      	ADDWFC      FARG_MFRC522_Anticoll_serNum+1, 0 
0x0574	0x6EDA      	MOVWF       FSR2L+1 
0x0576	0x50DE      	MOVF        POSTINC2, 0 
0x0578	0x1A58      	XORWF       MFRC522_Anticoll_serNumCheck_L0, 1 
;rc522.h,703 :: 		for (i=0; i<4; i++)
0x057A	0x2A55      	INCF        MFRC522_Anticoll_i_L0, 1 
;rc522.h,706 :: 		}
0x057C	0xD7F3      	BRA         L_MFRC522_Anticoll44
L_MFRC522_Anticoll45:
;rc522.h,707 :: 		if (serNumCheck != serNum[i])
0x057E	0x5055      	MOVF        MFRC522_Anticoll_i_L0, 0 
0x0580	0x2452      	ADDWF       FARG_MFRC522_Anticoll_serNum, 0 
0x0582	0x6ED9      	MOVWF       FSR2L 
0x0584	0x0E00      	MOVLW       0
0x0586	0x2053      	ADDWFC      FARG_MFRC522_Anticoll_serNum+1, 0 
0x0588	0x6EDA      	MOVWF       FSR2L+1 
0x058A	0x5058      	MOVF        MFRC522_Anticoll_serNumCheck_L0, 0 
0x058C	0x18DE      	XORWF       POSTINC2, 0 
0x058E	0xE002      	BZ          L_MFRC522_Anticoll47
;rc522.h,709 :: 		status = MI_ERR;
0x0590	0x0E02      	MOVLW       2
0x0592	0x6E54      	MOVWF       MFRC522_Anticoll_status_L0 
;rc522.h,710 :: 		}
L_MFRC522_Anticoll47:
;rc522.h,711 :: 		}
L_MFRC522_Anticoll43:
;rc522.h,715 :: 		return status;
0x0594	0xF000C054  	MOVFF       MFRC522_Anticoll_status_L0, R0
;rc522.h,716 :: 		}
L_end_MFRC522_Anticoll:
0x0598	0x0012      	RETURN      0
; end of _MFRC522_Anticoll
_memcpy:
;__Lib_CString.c,37 :: 		
;__Lib_CString.c,41 :: 		
0x059A	0xF004C054  	MOVFF       FARG_memcpy_s1, R4
0x059E	0xF005C055  	MOVFF       FARG_memcpy_s1+1, R5
;__Lib_CString.c,42 :: 		
0x05A2	0xF002C052  	MOVFF       FARG_memcpy_d1, R2
0x05A6	0xF003C053  	MOVFF       FARG_memcpy_d1+1, R3
;__Lib_CString.c,43 :: 		
L_memcpy7:
0x05AA	0xF000C056  	MOVFF       FARG_memcpy_n, R0
0x05AE	0xF001C057  	MOVFF       FARG_memcpy_n+1, R1
0x05B2	0x0E01      	MOVLW       1
0x05B4	0x5E56      	SUBWF       FARG_memcpy_n, 1 
0x05B6	0x0E00      	MOVLW       0
0x05B8	0x5A57      	SUBWFB      FARG_memcpy_n+1, 1 
0x05BA	0x5000      	MOVF        R0, 0 
0x05BC	0x1001      	IORWF       R1, 0 
0x05BE	0xE00F      	BZ          L_memcpy8
;__Lib_CString.c,44 :: 		
0x05C0	0xFFE9C004  	MOVFF       R4, FSR0L
0x05C4	0xFFEAC005  	MOVFF       R5, FSR0H
0x05C8	0xFFE1C002  	MOVFF       R2, FSR1L
0x05CC	0xFFE2C003  	MOVFF       R3, FSR1H
0x05D0	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x05D4	0x4A02      	INFSNZ      R2, 1 
0x05D6	0x2A03      	INCF        R3, 1 
0x05D8	0x4A04      	INFSNZ      R4, 1 
0x05DA	0x2A05      	INCF        R5, 1 
0x05DC	0xD7E6      	BRA         L_memcpy7
L_memcpy8:
;__Lib_CString.c,46 :: 		
0x05DE	0xF000C052  	MOVFF       FARG_memcpy_d1, R0
0x05E2	0xF001C053  	MOVFF       FARG_memcpy_d1+1, R1
;__Lib_CString.c,47 :: 		
L_end_memcpy:
0x05E6	0x0012      	RETURN      0
; end of _memcpy
_SetFormatRDM630:
;rc522.h,253 :: 		void SetFormatRDM630(void)
;rc522.h,260 :: 		uchar_send[0] = Separate_hexP10(serNum[0]);
0x05E8	0xF059C030  	MOVFF       _serNum, FARG_Separate_hexP10_val
0x05EC	0xDDC3      	RCALL       _Separate_hexP10
0x05EE	0xF028C000  	MOVFF       R0, _uchar_send
;rc522.h,261 :: 		uchar_send[1] = Separate_hexP1(serNum[0]);
0x05F2	0xF059C030  	MOVFF       _serNum, FARG_Separate_hexP1_val
0x05F6	0xDDDA      	RCALL       _Separate_hexP1
0x05F8	0xF029C000  	MOVFF       R0, _uchar_send+1
;rc522.h,262 :: 		uchar_send[2] = Separate_hexP10(serNum[1]);
0x05FC	0xF059C031  	MOVFF       _serNum+1, FARG_Separate_hexP10_val
0x0600	0xDDB9      	RCALL       _Separate_hexP10
0x0602	0xF02AC000  	MOVFF       R0, _uchar_send+2
;rc522.h,263 :: 		uchar_send[3] = Separate_hexP1(serNum[1]);
0x0606	0xF059C031  	MOVFF       _serNum+1, FARG_Separate_hexP1_val
0x060A	0xDDD0      	RCALL       _Separate_hexP1
0x060C	0xF02BC000  	MOVFF       R0, _uchar_send+3
;rc522.h,264 :: 		uchar_send[4] = Separate_hexP10(serNum[2]);
0x0610	0xF059C032  	MOVFF       _serNum+2, FARG_Separate_hexP10_val
0x0614	0xDDAF      	RCALL       _Separate_hexP10
0x0616	0xF02CC000  	MOVFF       R0, _uchar_send+4
;rc522.h,265 :: 		uchar_send[5] = Separate_hexP1(serNum[2]);
0x061A	0xF059C032  	MOVFF       _serNum+2, FARG_Separate_hexP1_val
0x061E	0xDDC6      	RCALL       _Separate_hexP1
0x0620	0xF02DC000  	MOVFF       R0, _uchar_send+5
;rc522.h,266 :: 		uchar_send[6] = Separate_hexP10(serNum[3]);
0x0624	0xF059C033  	MOVFF       _serNum+3, FARG_Separate_hexP10_val
0x0628	0xDDA5      	RCALL       _Separate_hexP10
0x062A	0xF02EC000  	MOVFF       R0, _uchar_send+6
;rc522.h,267 :: 		uchar_send[7] = Separate_hexP1(serNum[3]);
0x062E	0xF059C033  	MOVFF       _serNum+3, FARG_Separate_hexP1_val
0x0632	0xDDBC      	RCALL       _Separate_hexP1
0x0634	0xF02FC000  	MOVFF       R0, _uchar_send+7
;rc522.h,276 :: 		read[0]= uchar_send[0];
0x0638	0xF01EC028  	MOVFF       _uchar_send, _read
;rc522.h,277 :: 		read[1]= uchar_send[1];
0x063C	0xF01FC029  	MOVFF       _uchar_send+1, _read+1
;rc522.h,278 :: 		read[2]= uchar_send[2];
0x0640	0xF020C02A  	MOVFF       _uchar_send+2, _read+2
;rc522.h,279 :: 		read[3]= uchar_send[3];
0x0644	0xF021C02B  	MOVFF       _uchar_send+3, _read+3
;rc522.h,280 :: 		read[4]= uchar_send[4];
0x0648	0xF022C02C  	MOVFF       _uchar_send+4, _read+4
;rc522.h,281 :: 		read[5]= uchar_send[5];
0x064C	0xF023C02D  	MOVFF       _uchar_send+5, _read+5
;rc522.h,282 :: 		read[6]= uchar_send[6];
0x0650	0xF024C02E  	MOVFF       _uchar_send+6, _read+6
;rc522.h,283 :: 		read[7]= uchar_send[7];
0x0654	0xF025C000  	MOVFF       R0, _read+7
;rc522.h,285 :: 		}
L_end_SetFormatRDM630:
0x0658	0x0012      	RETURN      0
; end of _SetFormatRDM630
_MFRC522_Request:
;rc522.h,537 :: 		uchar MFRC522_Request(uchar reqMode, uchar *TagType)
;rc522.h,542 :: 		Write_MFRC522(BitFramingReg, 0x07);                //TxLastBists = BitFramingReg[2..0]        ???
0x065A	0x0E0D      	MOVLW       13
0x065C	0x0100      	MOVLB       0
0x065E	0x6F6D      	MOVWF       FARG_Write_MFRC522_addr, 1
0x0660	0x0E07      	MOVLW       7
0x0662	0x6F6E      	MOVWF       FARG_Write_MFRC522_val, 1
0x0664	0xDD63      	RCALL       _Write_MFRC522
;rc522.h,544 :: 		TagType[0] = reqMode;
0x0666	0xFFE1C053  	MOVFF       FARG_MFRC522_Request_TagType, FSR1L
0x066A	0xFFE2C054  	MOVFF       FARG_MFRC522_Request_TagType+1, FSR1H
0x066E	0xFFE6C052  	MOVFF       FARG_MFRC522_Request_reqMode, POSTINC1
;rc522.h,545 :: 		status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
0x0672	0x0E0C      	MOVLW       12
0x0674	0x6F61      	MOVWF       FARG_MFRC522_ToCard_command, 1
0x0676	0xF062C053  	MOVFF       FARG_MFRC522_Request_TagType, FARG_MFRC522_ToCard_sendData
0x067A	0xF063C054  	MOVFF       FARG_MFRC522_Request_TagType+1, FARG_MFRC522_ToCard_sendData+1
0x067E	0x0E01      	MOVLW       1
0x0680	0x6F64      	MOVWF       FARG_MFRC522_ToCard_sendLen, 1
0x0682	0xF065C053  	MOVFF       FARG_MFRC522_Request_TagType, FARG_MFRC522_ToCard_backData
0x0686	0xF066C054  	MOVFF       FARG_MFRC522_Request_TagType+1, FARG_MFRC522_ToCard_backData+1
0x068A	0x0E56      	MOVLW       MFRC522_Request_backBits_L0
0x068C	0x6F67      	MOVWF       FARG_MFRC522_ToCard_backLen, 1
0x068E	0x0E00      	MOVLW       hi_addr(MFRC522_Request_backBits_L0)
0x0690	0x6F68      	MOVWF       FARG_MFRC522_ToCard_backLen+1, 1
0x0692	0xDD9C      	RCALL       _MFRC522_ToCard
0x0694	0xF055C000  	MOVFF       R0, MFRC522_Request_status_L0
;rc522.h,547 :: 		if ((status != MI_OK) || (backBits != 0x10))
0x0698	0x5000      	MOVF        R0, 0 
0x069A	0x0A00      	XORLW       0
0x069C	0xE107      	BNZ         L__MFRC522_Request93
0x069E	0x0E00      	MOVLW       0
0x06A0	0x1857      	XORWF       MFRC522_Request_backBits_L0+1, 0 
0x06A2	0xE102      	BNZ         L__MFRC522_Request117
0x06A4	0x0E10      	MOVLW       16
0x06A6	0x1856      	XORWF       MFRC522_Request_backBits_L0, 0 
L__MFRC522_Request117:
0x06A8	0xE101      	BNZ         L__MFRC522_Request93
0x06AA	0xD002      	BRA         L_MFRC522_Request16
L__MFRC522_Request93:
;rc522.h,549 :: 		status = MI_ERR;
0x06AC	0x0E02      	MOVLW       2
0x06AE	0x6E55      	MOVWF       MFRC522_Request_status_L0 
;rc522.h,550 :: 		}
L_MFRC522_Request16:
;rc522.h,552 :: 		return status;
0x06B0	0xF000C055  	MOVFF       MFRC522_Request_status_L0, R0
;rc522.h,553 :: 		}
L_end_MFRC522_Request:
0x06B4	0x0012      	RETURN      0
; end of _MFRC522_Request
_MFRC522_Halt:
;rc522.h,894 :: 		void MFRC522_Halt(void)
;rc522.h,900 :: 		buff[0] = PICC_HALT;
0x06B6	0x0E50      	MOVLW       80
0x06B8	0x6E54      	MOVWF       MFRC522_Halt_buff_L0 
;rc522.h,901 :: 		buff[1] = 0;
0x06BA	0x6A55      	CLRF        MFRC522_Halt_buff_L0+1 
;rc522.h,902 :: 		CalulateCRC(buff, 2, &buff[2]);
0x06BC	0x0E54      	MOVLW       MFRC522_Halt_buff_L0
0x06BE	0x6E59      	MOVWF       FARG_CalulateCRC_pIndata 
0x06C0	0x0E00      	MOVLW       hi_addr(MFRC522_Halt_buff_L0)
0x06C2	0x6E5A      	MOVWF       FARG_CalulateCRC_pIndata+1 
0x06C4	0x0E02      	MOVLW       2
0x06C6	0x6E5B      	MOVWF       FARG_CalulateCRC_len 
0x06C8	0x0E56      	MOVLW       MFRC522_Halt_buff_L0+2
0x06CA	0x6E5C      	MOVWF       FARG_CalulateCRC_pOutData 
0x06CC	0x0E00      	MOVLW       hi_addr(MFRC522_Halt_buff_L0+2)
0x06CE	0x6E5D      	MOVWF       FARG_CalulateCRC_pOutData+1 
0x06D0	0xDE72      	RCALL       _CalulateCRC
;rc522.h,904 :: 		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
0x06D2	0x0E0C      	MOVLW       12
0x06D4	0x6F61      	MOVWF       FARG_MFRC522_ToCard_command, 1
0x06D6	0x0E54      	MOVLW       MFRC522_Halt_buff_L0
0x06D8	0x6F62      	MOVWF       FARG_MFRC522_ToCard_sendData, 1
0x06DA	0x0E00      	MOVLW       hi_addr(MFRC522_Halt_buff_L0)
0x06DC	0x6F63      	MOVWF       FARG_MFRC522_ToCard_sendData+1, 1
0x06DE	0x0E04      	MOVLW       4
0x06E0	0x6F64      	MOVWF       FARG_MFRC522_ToCard_sendLen, 1
0x06E2	0x0E54      	MOVLW       MFRC522_Halt_buff_L0
0x06E4	0x6F65      	MOVWF       FARG_MFRC522_ToCard_backData, 1
0x06E6	0x0E00      	MOVLW       hi_addr(MFRC522_Halt_buff_L0)
0x06E8	0x6F66      	MOVWF       FARG_MFRC522_ToCard_backData+1, 1
0x06EA	0x0E52      	MOVLW       MFRC522_Halt_unLen_L0
0x06EC	0x6F67      	MOVWF       FARG_MFRC522_ToCard_backLen, 1
0x06EE	0x0E00      	MOVLW       hi_addr(MFRC522_Halt_unLen_L0)
0x06F0	0x6F68      	MOVWF       FARG_MFRC522_ToCard_backLen+1, 1
0x06F2	0xDD6C      	RCALL       _MFRC522_ToCard
;rc522.h,905 :: 		}
L_end_MFRC522_Halt:
0x06F4	0x0012      	RETURN      0
; end of _MFRC522_Halt
_Serial_print:
;RFID_MODULE.c,9 :: 		void Serial_print(char *s){
;RFID_MODULE.c,10 :: 		while(*s){
L_Serial_print87:
0x06F6	0xFFE9C052  	MOVFF       FARG_Serial_print_s, FSR0L
0x06FA	0xFFEAC053  	MOVFF       FARG_Serial_print_s+1, FSR0H
0x06FE	0x52EE      	MOVF        POSTINC0, 1 
0x0700	0xE00A      	BZ          L_Serial_print88
;RFID_MODULE.c,11 :: 		UART1_WRITE(*s++);
0x0702	0xFFE9C052  	MOVFF       FARG_Serial_print_s, FSR0L
0x0706	0xFFEAC053  	MOVFF       FARG_Serial_print_s+1, FSR0H
0x070A	0xF059CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x070E	0xDE9F      	RCALL       _UART1_Write
0x0710	0x4A52      	INFSNZ      FARG_Serial_print_s, 1 
0x0712	0x2A53      	INCF        FARG_Serial_print_s+1, 1 
;RFID_MODULE.c,12 :: 		}
0x0714	0xD7F0      	BRA         L_Serial_print87
L_Serial_print88:
;RFID_MODULE.c,13 :: 		}
L_end_Serial_print:
0x0716	0x0012      	RETURN      0
; end of _Serial_print
_Serial_println:
;RFID_MODULE.c,3 :: 		void Serial_println(char *s){
;RFID_MODULE.c,4 :: 		while(*s){
L_Serial_println85:
0x0718	0xFFE9C052  	MOVFF       FARG_Serial_println_s, FSR0L
0x071C	0xFFEAC053  	MOVFF       FARG_Serial_println_s+1, FSR0H
0x0720	0x52EE      	MOVF        POSTINC0, 1 
0x0722	0xE00A      	BZ          L_Serial_println86
;RFID_MODULE.c,5 :: 		UART1_WRITE(*s++);
0x0724	0xFFE9C052  	MOVFF       FARG_Serial_println_s, FSR0L
0x0728	0xFFEAC053  	MOVFF       FARG_Serial_println_s+1, FSR0H
0x072C	0xF059CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x0730	0xDE8E      	RCALL       _UART1_Write
0x0732	0x4A52      	INFSNZ      FARG_Serial_println_s, 1 
0x0734	0x2A53      	INCF        FARG_Serial_println_s+1, 1 
;RFID_MODULE.c,6 :: 		}
0x0736	0xD7F0      	BRA         L_Serial_println85
L_Serial_println86:
;RFID_MODULE.c,7 :: 		UART1_WRITE(0X0D);
0x0738	0x0E0D      	MOVLW       13
0x073A	0x6E59      	MOVWF       FARG_UART1_Write_data_ 
0x073C	0xDE88      	RCALL       _UART1_Write
;RFID_MODULE.c,8 :: 		}
L_end_Serial_println:
0x073E	0x0012      	RETURN      0
; end of _Serial_println
_main:
0x0740	0x0E49      	MOVLW       73
0x0742	0x6E18      	MOVWF       ?lstr1_RFID_MODULE 
0x0744	0x0E44      	MOVLW       68
0x0746	0x6E19      	MOVWF       25 
0x0748	0x0E3A      	MOVLW       58
0x074A	0x6E1A      	MOVWF       26 
0x074C	0x0E20      	MOVLW       32
0x074E	0x6E1B      	MOVWF       27 
0x0750	0x6A1C      	CLRF        28 
0x0752	0x6A1D      	CLRF        _receiv_cnt 
;RFID_MODULE.c,14 :: 		void main()
;RFID_MODULE.c,18 :: 		TRISB = 0B11111111;   // protection for ICSP TIME - W/ OUT MCLR - DON'T REMOVE THIS!
0x0754	0x0EFF      	MOVLW       255
0x0756	0x6E93      	MOVWF       TRISB 
;RFID_MODULE.c,19 :: 		delay1ms(500);        // protection for ICSP TIME - W/ OUT MCLR - DON'T REMOVE THIS!
0x0758	0x0EF4      	MOVLW       244
0x075A	0x6E52      	MOVWF       FARG_delay1ms_delayTime 
0x075C	0x0E01      	MOVLW       1
0x075E	0x6E53      	MOVWF       FARG_delay1ms_delayTime+1 
0x0760	0xDE92      	RCALL       _delay1ms
;RFID_MODULE.c,20 :: 		TRISA = 0B00000000;
0x0762	0x6A92      	CLRF        TRISA 
;RFID_MODULE.c,21 :: 		TRISB = 0B00000010;
0x0764	0x0E02      	MOVLW       2
0x0766	0x6E93      	MOVWF       TRISB 
;RFID_MODULE.c,22 :: 		ADCON1=15;
0x0768	0x0E0F      	MOVLW       15
0x076A	0x6EC1      	MOVWF       ADCON1 
;RFID_MODULE.c,23 :: 		INTCON = 0B11000000;
0x076C	0x0EC0      	MOVLW       192
0x076E	0x6EF2      	MOVWF       INTCON 
;RFID_MODULE.c,24 :: 		TRISC.F6=0;         //lcd back light
0x0770	0x9C94      	BCF         TRISC, 6 
;RFID_MODULE.c,25 :: 		PORTC.F6=0;
0x0772	0x9C82      	BCF         PORTC, 6 
;RFID_MODULE.c,26 :: 		Soft_SPI_Init();  // start the SPI library:
0x0774	0xDEC5      	RCALL       _Soft_SPI_Init
;RFID_MODULE.c,27 :: 		Chip_Select = 1;  // SlaveSelect (SS) RFID reader
0x0776	0x8080      	BSF         RA0_bit, BitPos(RA0_bit+0) 
;RFID_MODULE.c,28 :: 		MFRC522_Init();
0x0778	0xDEA2      	RCALL       _MFRC522_Init
;RFID_MODULE.c,29 :: 		while (1)  // loop forever
L_main89:
;RFID_MODULE.c,32 :: 		status = MFRC522_Request(PICC_REQIDL, str);
0x077A	0x0E26      	MOVLW       38
0x077C	0x6E52      	MOVWF       FARG_MFRC522_Request_reqMode 
0x077E	0x0E42      	MOVLW       main_str_L0
0x0780	0x6E53      	MOVWF       FARG_MFRC522_Request_TagType 
0x0782	0x0E00      	MOVLW       hi_addr(main_str_L0)
0x0784	0x6E54      	MOVWF       FARG_MFRC522_Request_TagType+1 
0x0786	0xDF69      	RCALL       _MFRC522_Request
0x0788	0xF041C000  	MOVFF       R0, main_status_L0
;RFID_MODULE.c,34 :: 		status = MFRC522_Anticoll(str);
0x078C	0x0E42      	MOVLW       main_str_L0
0x078E	0x6E52      	MOVWF       FARG_MFRC522_Anticoll_serNum 
0x0790	0x0E00      	MOVLW       hi_addr(main_str_L0)
0x0792	0x6E53      	MOVWF       FARG_MFRC522_Anticoll_serNum+1 
0x0794	0xDEBC      	RCALL       _MFRC522_Anticoll
0x0796	0xF041C000  	MOVFF       R0, main_status_L0
;RFID_MODULE.c,35 :: 		memcpy(serNum, str, 5);
0x079A	0x0E30      	MOVLW       _serNum
0x079C	0x6E52      	MOVWF       FARG_memcpy_d1 
0x079E	0x0E00      	MOVLW       hi_addr(_serNum)
0x07A0	0x6E53      	MOVWF       FARG_memcpy_d1+1 
0x07A2	0x0E42      	MOVLW       main_str_L0
0x07A4	0x6E54      	MOVWF       FARG_memcpy_s1 
0x07A6	0x0E00      	MOVLW       hi_addr(main_str_L0)
0x07A8	0x6E55      	MOVWF       FARG_memcpy_s1+1 
0x07AA	0x0E05      	MOVLW       5
0x07AC	0x6E56      	MOVWF       FARG_memcpy_n 
0x07AE	0x0E00      	MOVLW       0
0x07B0	0x6E57      	MOVWF       FARG_memcpy_n+1 
0x07B2	0xDEF3      	RCALL       _memcpy
;RFID_MODULE.c,37 :: 		if (status == MI_OK)   //if ther is a new card detected
0x07B4	0x5041      	MOVF        main_status_L0, 0 
0x07B6	0x0A00      	XORLW       0
0x07B8	0xE10C      	BNZ         L_main91
;RFID_MODULE.c,39 :: 		SetFormatRDM630(void); // take serNum and format it and retern read
0x07BA	0xDF16      	RCALL       _SetFormatRDM630
;RFID_MODULE.c,40 :: 		Serial_print("ID: ");
0x07BC	0x0E18      	MOVLW       ?lstr1_RFID_MODULE
0x07BE	0x6E52      	MOVWF       FARG_Serial_print_s 
0x07C0	0x0E00      	MOVLW       hi_addr(?lstr1_RFID_MODULE)
0x07C2	0x6E53      	MOVWF       FARG_Serial_print_s+1 
0x07C4	0xDF98      	RCALL       _Serial_print
;RFID_MODULE.c,41 :: 		Serial_println(read);
0x07C6	0x0E1E      	MOVLW       _read
0x07C8	0x6E52      	MOVWF       FARG_Serial_println_s 
0x07CA	0x0E00      	MOVLW       hi_addr(_read)
0x07CC	0x6E53      	MOVWF       FARG_Serial_println_s+1 
0x07CE	0xDFA4      	RCALL       _Serial_println
;RFID_MODULE.c,42 :: 		}
0x07D0	0xD006      	BRA         L_main92
L_main91:
;RFID_MODULE.c,45 :: 		MFRC522_Halt();                       // Command card into hibernation
0x07D2	0xDF71      	RCALL       _MFRC522_Halt
;RFID_MODULE.c,46 :: 		delay1ms(50);                       // wait for low consuption
0x07D4	0x0E32      	MOVLW       50
0x07D6	0x6E52      	MOVWF       FARG_delay1ms_delayTime 
0x07D8	0x0E00      	MOVLW       0
0x07DA	0x6E53      	MOVWF       FARG_delay1ms_delayTime+1 
0x07DC	0xDE54      	RCALL       _delay1ms
;RFID_MODULE.c,47 :: 		}
L_main92:
;RFID_MODULE.c,49 :: 		}
0x07DE	0xD7CD      	BRA         L_main89
;RFID_MODULE.c,50 :: 		}
L_end_main:
0x07E0	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [102]    _interrupt
0x006E      [10]    _Delay_10us
0x0078      [10]    _Delay_22us
0x0082       [4]    _Delay_1us
0x0086      [80]    _Soft_SPI_Read
0x00D6      [58]    _Soft_SPI_Write
0x0110      [28]    _Read_MFRC522
0x012C      [28]    _Write_MFRC522
0x0148      [24]    _ClearBitMask
0x0160      [20]    _SetBitMask
0x0174      [56]    _Separate_hexP10
0x01AC      [32]    _Separate_hexP1
0x01CC     [490]    _MFRC522_ToCard
0x03B6     [152]    _CalulateCRC
0x044E      [14]    _UART1_Write
0x045C      [28]    _AntennaOn
0x0478      [14]    _MFRC522_Reset
0x0486      [40]    _delay1ms
0x04AE      [16]    ___CC2DW
0x04BE      [66]    _MFRC522_Init
0x0500      [14]    _Soft_SPI_Init
0x050E     [140]    _MFRC522_Anticoll
0x059A      [78]    _memcpy
0x05E8     [114]    _SetFormatRDM630
0x065A      [92]    _MFRC522_Request
0x06B6      [64]    _MFRC522_Halt
0x06F6      [34]    _Serial_print
0x0718      [40]    _Serial_println
0x0740     [162]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0001       [1]    ispunct_rslt_L0
0x0001       [2]    delay1ms_loop1_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    R1
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memchr_s_L0
0x0002       [1]    R2
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memset_pp_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    R3
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [1]    R4
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0018       [5]    ?lstr1_RFID_MODULE
0x001D       [1]    _receiv_cnt
0x001E      [10]    _read
0x0028       [8]    _uchar_send
0x0030       [5]    _serNum
0x0035       [1]    _bytevar3
0x0036       [1]    _Output1
0x0037       [0]    _stringComplete
0x0038       [8]    _receive
0x0040       [1]    _bytevar4
0x0041       [1]    main_status_L0
0x0042      [16]    main_str_L0
0x0052       [2]    MFRC522_Halt_unLen_L0
0x0052       [2]    FARG_Serial_print_s
0x0052       [2]    FARG_memcpy_d1
0x0052       [2]    FARG_Serial_println_s
0x0052       [2]    FARG_delay1ms_delayTime
0x0052       [1]    FARG_MFRC522_Request_reqMode
0x0052       [2]    FARG_MFRC522_Anticoll_serNum
0x0053       [2]    FARG_MFRC522_Request_TagType
0x0054       [4]    MFRC522_Halt_buff_L0
0x0054       [2]    FARG_memcpy_s1
0x0054       [1]    MFRC522_Anticoll_status_L0
0x0055       [1]    MFRC522_Anticoll_i_L0
0x0055       [1]    MFRC522_Request_status_L0
0x0056       [2]    FARG_memcpy_n
0x0056       [2]    MFRC522_Anticoll_unLen_L0
0x0056       [2]    MFRC522_Request_backBits_L0
0x0058       [1]    MFRC522_Anticoll_serNumCheck_L0
0x0059       [1]    FARG_Separate_hexP10_val
0x0059       [1]    MFRC522_ToCard_lastBits_L0
0x0059       [1]    FARG_Separate_hexP1_val
0x0059       [1]    FARG_UART1_Write_data_
0x0059       [2]    FARG_CalulateCRC_pIndata
0x005A       [1]    MFRC522_ToCard_n_L0
0x005B       [2]    MFRC522_ToCard_i_L0
0x005B       [1]    FARG_CalulateCRC_len
0x005C       [2]    FARG_CalulateCRC_pOutData
0x005D       [1]    MFRC522_ToCard_status_L0
0x005E       [1]    CalulateCRC_i_L0
0x005E       [1]    MFRC522_ToCard_irqEn_L0
0x005F       [1]    CalulateCRC_n_L0
0x005F       [1]    MFRC522_ToCard_waitIRq_L0
0x0060       [2]    FLOC__CalulateCRC
0x0061       [1]    FARG_MFRC522_ToCard_command
0x0062       [2]    FARG_MFRC522_ToCard_sendData
0x0064       [1]    FARG_MFRC522_ToCard_sendLen
0x0065       [2]    FARG_MFRC522_ToCard_backData
0x0067       [2]    FARG_MFRC522_ToCard_backLen
0x0069       [2]    FLOC__MFRC522_ToCard
0x006B       [1]    FARG_SetBitMask_reg
0x006B       [1]    FARG_ClearBitMask_reg
0x006C       [1]    FARG_ClearBitMask_mask
0x006C       [1]    FARG_SetBitMask_mask
0x006D       [1]    FARG_Read_MFRC522_addr
0x006D       [1]    FARG_Write_MFRC522_addr
0x006E       [1]    FARG_Write_MFRC522_val
0x006F       [1]    FARG_Soft_SPI_Write_sdata
0x006F       [1]    FARG_Soft_SPI_Read_sdata
0x0070       [1]    Soft_SPI_Read_i_L0
0x0070       [1]    Soft_SPI_Write_i_L0
0x0071       [1]    interrupt_RCREG_temp_L0
0x0F80       [0]    RA1_bit
0x0F80       [0]    SoftSpi_SDO
0x0F80       [0]    SoftSpi_SDI
0x0F80       [0]    Chip_Select
0x0F80       [0]    RA0_bit
0x0F80       [0]    SoftSpi_CLK
0x0F80       [0]    RA2_bit
0x0F80       [0]    RA3_bit
0x0F81       [0]    RB2_bit
0x0F82       [1]    PORTC
0x0F92       [0]    SoftSpi_CLK_Direction
0x0F92       [0]    SoftSpi_SDO_Direction
0x0F92       [0]    SoftSpi_SDI_Direction
0x0F92       [1]    TRISA
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA2_bit
0x0F92       [0]    TRISA3_bit
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F9E       [1]    PIR1
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
